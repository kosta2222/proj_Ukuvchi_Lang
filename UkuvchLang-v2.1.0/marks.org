* Переопределения    
typedef unsigned char u1;    
typedef uint32_t u4;    
* Что нового в переменных ВМ    
Сделал такие структуры    
typedef struct {    
        long heapPtr;    
        int type;    
    
    } Object;    
    
    typedef struct {    
        float floatValue;    
        u4 intValue;    
        Object object;    
    } Variable;    
    
и сделал такой операндовый стек:    
Variable stack[DEFAULT_STACK_SIZE]    

    
* Как попытался сделать кучу в стиле С    
Обьявил глобальные переменные    
Variable * m_objectMap[100];    
u4 m_nNextObjectID = 0;    
Первая строка - карта где хочу хранить массив указателей на    
структуру Variable, эту структуру т.е. ее поле floatValue я 
собираюсь использовать для постраения массивов для чисел и хранить указатель
на такой массив хранить в m_objectMap.
** Как я делал функцию создания массивы и отпечатки "карты",в последней ERROR!!!
Принимает условный тип что это массив и количество элементов со стека,
в исходном коде задается так
($ (newarray(6)) соответственно появилась ветка в исполнителе 
case NEWARRAY она выглядит так:
 case NEWARRAY:
          {
            vm->stack[++sp].object = createNewArray (1, (int) vm->stack[sp].floatValue);
          }
 
Object
createNewArray (u4 type, u4 count)
{
  Object object;
  object.heapPtr = NULL;
  object.type = 0;

  // Создаем массив
  Variable *obj = (Variable*) malloc (sizeof (Variable)*(count + 1));

  // Добавляем обьект в "карту"
  if (obj)
    {
      memset (obj, 0, sizeof (Variable) * (count + 1));
      object.heapPtr = m_nNextObjectID++;
      obj[0].intValue = type;
      m_objectMap[object.heapPtr] = obj;
    }


  return object;
}

void
dumpHeap ()
{
  // обработать "карту"
  for (int i = 0; i < 10; i++) // возьмем 10 указателей
    {
      printf ("key %d=>\n", i);

      Variable* ptrElem = m_objectMap[i]; // получаем указатель на массив из "карты"
      for (int i = 0; i < 4; i++) // Надо отпечатать этот массив
        {
          printf ("%f:", ptrElem[i].floatValue);// Вот здсь ЗАВИСАЕТ-ОШИБКА
        }

    }

}

*** Отладка функции dumpHeap в vm.cpp
Breakpoint 1 at 0x401515: file d:/NetBeansCppProjects/proj_testVmWithSimpleHeap/
vm.cpp, line 143.
(gdb) run
Starting program: D:\NetBeansCppProjects\proj_testVmWithSimpleHeap\dist\Debug\Mi
nGW-Windows\proj_testvmwithsimpleheap.exe
[New Thread 1480.0xd00]
size of whole byte-code 4
0000: iconst     5.000000number of byte-code:12
stack=[ 5.000000 ]
Heap:

Breakpoint 1, dumpHeap ()
    at d:/NetBeansCppProjects/proj_testVmWithSimpleHeap/vm.cpp:143
143       for (int i = 0; i < 10; i++) // Р?Р?Р·С?Р?РчР? 10 С?РєР°Р·Р°С'РчР>РчР№
(gdb) p ptrElem
$1 = (Variable *) 0x0
D:\NetBeansCppProjects\proj_testVmWithSimpleHeap\dist\Debug\MinGW-Windows(gdb) p ptrElem .floatValue
Cannot access memory at address 0x0
*** (Попытка) Отладка создаеся ли массив в куче
Breakpoint 3, main ()
    at d:/NetBeansCppProjects/proj_testVmWithSimpleHeap/vm.cpp:502
502       VM *vm = vm_create (opcodeCharBuffer, sizeof (opcodeCharBuffer), 0);
(gdb) p opcodeCharBuffer
$1 = (u1 *) 0x5f1888 "\f"
(gdb) n
503       vm_exec (vm, 0, true, 0);
(gdb) s
vm_exec (vm=0x5f38f8, startip=0, trace=true, returnPrintOpFromLocals_flag=0)
    at d:/NetBeansCppProjects/proj_testVmWithSimpleHeap/vm.cpp:175
175       float a = 0;
(gdb) n
176       float b = 0;
(gdb) n
177       int addr = 0;
(gdb) n
178       int offset = 0;
(gdb) n
180       ip = startip;
(gdb) n
181       sp = -1;
(gdb) n
182       callsp = -1;
(gdb) n
195       u4 opcode = vm->code[ip];
(gdb) n
196       while (opcode != HALT)
(gdb) p opcode
$2 = 12
(gdb) n
198           if (trace)
(gdb) n
200               vm_print_instr (vm->code, ip);
(gdb) n
0000: iconst     5.000000203          printf ("number of byte-code:%d\n", opcode
);
(gdb) n
number of byte-code:12
204           ip++;
(gdb)
205           switch (opcode)
(gdb) n
269               vm->stack[++sp].floatValue = *((float*) &vm->code[ip]);
(gdb) n
271               ip += 3;
(gdb) n
272               ip++;
(gdb) n
273               break;
(gdb) n
375           if (trace) vm_print_stack (vm->stack, sp);
(gdb) n
stack=[ 5.000000 ]
376           opcode = vm->code[ip];
(gdb) n
377           printf ("Heap:\n");
(gdb) p opcode
$3 = 25
(gdb) n
Heap:
378           dumpHeap ();
**** Не выполнила опкод NEWARRAY из исходногfо кода!
***** Решение:NEARRAY после добавки break выполняется=>куча с массивом отпечатывается !
После ($(newarray (5)) вывод:
size of whole byte-code 4
0000: iconst     5.000000number of byte-code:12
stack=[ 5.000000 ]
0005:  NEWARRAY            number of byte-code:25
stack=[ 5.000000 0.000000 ]
Data memory:
Heap:
key 0 => This type is 10.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1624034898851750000000.000000, 0.000000, 0.000000, 0.000000,
key 1 => key 2 => key 3 => key 4 => key 5 => key 6 => key 7 => key 8 => key 9 =>
***** 0 элемента обьекта будет обозначать его тип т.е. массив, взял 1 - почемуто отпечатал 10.000000
В  ветка attempt-to-add-Array-Heap-support коммит  heap with array works but does not show it s type correctly



* Проблемы с недостаточно выделенным буфером
Отладка показывает что файл с размером 29 байт определяется
как 4 байта через long lSize = ftell (ptrFile):
``` C
int
main ()
{
  FILE * ptrFile = fopen ("code.bin", "r");

  if (ptrFile == NULL)
    {
      fputs ("Ошибка файла", stderr);
      exit (1);
    }

  // определяем размер файла
  fseek (ptrFile, 0, SEEK_END); // устанавливаем позицию в конец файла
  long lSize = ftell (ptrFile); // получаем размер в байтах
  rewind (ptrFile); // устанавливаем указатель в конец файла

  u1 * opcodeCharBuffer = (u1*) malloc (sizeof (u1) * lSize); // выделить память для хранения содержимого файла
  if (opcodeCharBuffer == NULL)
    {
      fputs ("Ошибка памяти", stderr);
      exit (2);
    }

  size_t result = fread (opcodeCharBuffer, 1, lSize, ptrFile); // считываем файл в буфер
  if (result != lSize)
    {
      fputs ("Ошибка чтения", stderr);
      exit (3);
    }


  // завершение работы
  fclose (ptrFile);

  printf ("size of whole byte-code %d\n", sizeof (opcodeCharBuffer));
  VM *vm = vm_create (opcodeCharBuffer, sizeof (opcodeCharBuffer), 0);
  vm_exec (vm, 0, true, 0);
  vm_free (vm);
  free (opcodeCharBuffer);

  return 0;
}
```
<debug>
Breakpoint 1, main ()
    at d:/NetBeansCppProjects/proj_testVmWithSimpleHeap/vm.cpp:502
502       FILE * ptrFile = fopen ("code.bin", "r");
(gdb) n
504       if (ptrFile == NULL)
(gdb) n
511       fseek (ptrFile, 0, SEEK_END); // устанавливаем позицию в конец файла  
(gdb) n
512       long lSize = ftell (ptrFile); // получаем размер файла в байтах 
(gdb) p lSize
$1 = 105
(gdb) p sizeof(lSize )
$2 = 4
</debug>
** int fseek (FILE *stream, long offset, int origin) 
int fseek (FILE *stream, long offset, int origin)
Прототип: 
stdio.h
Описание: 

Функция fseek() устанавливает указатель положения в файле, связанном со stream, в соответ­ствии со значениями offset и origin.
 Ее основное назначение — поддерживать операции ввода/ вывода по произвольному адресу.
 Аргумент offset — это выраженный в байтах сдвиг от позиции, определяемой origin, до новой позиции.
 Аргумент origin может принимать значения 0, 1 или 2, причем 0 означает начало файла, 1 — текущую позицию, а 2 — конец файла.
 В stdio.h определе­ны следующие макросы для origim
Имя 	Позиция origin
SEEK_SET 	Начало файла
SEEK_CUR 	Текущая позиция
SEEK_END 	Конец файла

 В случае успеха fseek() возвращает 0. Ненулевое значение означает неудачу.
 С помощью fseek() можно переместить указатель положения в любую точку внутри файла и даже за его пределы после конца файла.
 Однако попытка установить указатель перед началом файла будет восприня­та как ошибка.

Функция fseek() сбрасывает флаг конца файла, связанный с указанным потоком.
 Кроме того, она обнуляет любую предыдущую ungetc() в том же потоке.
Пример: 
Приведенная здесь функция отыскивает указанную структуру типа addr.
 Обратим внимание на то, что sizeof используется как для получения количества байт, на которое нужно сместиться, так и для обеспечения переносимости.
struct  addr {
char    name[40];
char    street[40];
char    city[40] ;
char    state[3];
char zip[10];
} info;
void find(long client_num)
{
FILE *fp;
if ((fp=fopen("mail", "rb"))==NULL) {
printf("Cannot open file.\n");
exit(1);
}
/* получение правильной структуры */
fseek(client_num*sizeof(struct addr), 0);
/* чтение данных в память */
fread(&info, sizeof(struct addr), 1, fp);
fclose(fp);
}
*** long ftell(FILE *stream)
Прототип: 
stdio.h
Описание: 

Функция ftell() возвращает текущее значение указателя положения в файле для указанного потока.
 Это значение представляет собой количество байт, на которое указатель отстоит от начала файла.

Функция ftell() возвращает — 1L в случае ошибки.
 Если в данном потоке невозможен поиск по произвольному адресу (в случае, например, консоли), возвращаемое значение не определяется.
Пример: 
Этот фрагмент кода возвращает текущее значение указателя положения для потока, на который указывает fp:
long i;
if((i=ftell(fp))==-1L) printf("A file error has occurred.\n");
*** void rewind(FILE *stream)
Прототип: 
stdio.h
Описание: 

Функция rewind() перемещает указатель положения в файле на начало указанного потока. Она также сбрасывает флаги конца файла и ошибки, связанные со stream. Она возвращает 0 в случае успеха и ненулевое значение в противном случае.
Пример: 
Данная функция дважды считывает поток, на который указывает fp, и каждый раз выводит файл на экран:
void re_read(FILE *fp)
{
/* чтение один раз */
while(!feof(fp)) putchar(getc(fp));
rewind(fp);
/* чтение два раза */
while(!feof(fp)) putchar(getc(fp));
}

* Сделать функцию принимающая байт-код u1* byte-code и раскладывающая по карте
** Должна быть в модуле карта
vTable=map<String,u1*>
vTable имя-функции=>тело-байт-код

function parseByte-codeToMap (u1 * byte-code):None
