//===============================================================================================
// here cmd usage
//===============================================================================================
usage: python ukuvchi.py [-h] [--natural_mode NATURAL_MODE] [--verbose] uk_script

bytecode interpretator with attempt to be like on natural lang(cmd opt)

positional arguments:
  uk_script             Uk script

optional arguments:
  -h, --help            show this help message and exit
  --natural_mode NATURAL_MODE, -nm NATURAL_MODE
                        with True par we read natural like lang
  --verbose, -v         with this par we print trace of compiller and vm

//===============================================================================================
// /here cmd usage
//===============================================================================================  

// calculate arithmetic expression (we need spaces there and [ ] parents) and print var
// $>  begin of a program
// ->  between expressions
// -!  end of a program
$> set! my_var (arif 3 + 4 * 2 - [ 1 + 5 ]) -> print my_var -!

Out:
0 Iload_const 3.0
2 Iload_const 4.0
4 Iload_const 2.0
6 Imult
7 Iadd
8 Iload_const 1.0
10 Iload_const 5.0
12 Iadd
13 Isub
14 Istore_name my_var
16 Iload_name my_var
18 Iprint
PRINT ob: 5.0
19 Istop  

//===============================================================================================
// support natural language like keywords for arifmetic and print
// we need launch as python ukuvchi <file> -nm True 
// Поддержка естественного языка на русском
// файл программы должен быть в кодировке utf8 без BOM
//===============================================================================================
ученик 
скажи задача арифметика 2 * 3 + 1 конец и
скажи задача арифметика 100 + 200 конец и
выполни

Out:
PRINT ob: 7.0
PRINT ob: 300.0

загрузи Система как сессия и вызовивстроенный сессия date 
выполни

Out:
2021-06-12 01:13:29.635000

ученик
определи вар_1 10 и скажи вар_1
выполни

Out:
PRINT ob: 10.0

ученик
определи вар_1 10 и скажи задача арифметика вар_1 + 20 конец
выполни

Out:
PRINT ob: 30.0

ученик
определи вар_1 200 и скажи задача арифметика вар_1 проценты 10 конец
выполни

Out:
PRINT ob: 20.0

ученик
скажи задача арифметика 300 проценты 20 конец
выполни

Out:
PRINT ob: 60.0

=================================================================================================
// / support natural language like keywords for arifmetic and print
// Поддержка естественного языка на русском
// файл программы должен быть в кодировке utf8 без BOM
//===============================================================================================


// create float var without arif keyword and print it
$> set! fl_var 9 -> print fl_var -!

// print string
$> print |test_str -!



// support line comment (expression comment)
$> // line comment 
-> // set! fl_var 9 -> // print fl_var -!

// here we add 2 string and print var
$> set! my_str_var (arif |this_is_test_string_var + |_yes) -> print my_str_var -!

Out:
0 Iload_const this_is_test_string_var
2 Iload_const _yes
4 Iadd
5 Istore_name my_str_var
7 Iload_name my_str_var
9 Iprint
PRINT ob: this_is_test_string_var_yes
10 Istop

// assign True or False value and print its inner str method
$-> set! a False -> print ( invokenative a _str_ ) -!
 
Out:
0 Iload_const 0
2 Istore_name a
4 Iload_const 0
6 Iload_name a
8 Iinvokenativedynamic _str_
10 Iprint
PRINT ob: False
11 Istop


// invokenative arrbitrary  metod from inner float object with args , print top of stack
$> set! a 9 -> print (invokenative a  _add_ (args 1)) -!

// if method have no args we invokenative it witout arg keyword
$> set! a 7 -> print(invokenativenative a _str_) -!


// print arrbitrary field from the object
$> set! fl_var 7 -> print (getfield fl_var test) -!


// make list with arguments , print top of stack 
$> print(build_list(args 3 4 5))) -!

Out:
<First frame executing> Frame str sp: -1 f_globals: {} f_locals: {} pc: 0 ret val None
0 Iload_const 3.0
stack->
[ 3.0 ]
2 Iload_const 4.0
stack->
[ 4.0 ]
[ 3.0 ]
4 Iload_const 5.0
stack->
[ 5.0 ]
[ 4.0 ]
[ 3.0 ]
6 Iload_const 3
stack->
[ 3 ]
[ 5.0 ]
[ 4.0 ]
[ 3.0 ]
8 Ibuild_list
stack->
[ 3 ]
[ 5.0 ]
[ 4.0 ]
[ <__main__.ObjectList object at 0x00799430> ]
9 Iprint
PRINT list
3.0 4.0 5.0
stack->
[ 3 ]
[ 5.0 ]
[ 4.0 ]
[ <__main__.ObjectList object at 0x00799430> ]
10 Istop
stack->
[ 3 ]
[ 5.0 ]
[ 4.0 ]
[ <__main__.ObjectList object at 0x00799430> ]
</frame executing>

// make list and append 9 to the end of it, print it
$> set! my_list (build_list ( args 2 4 5)) -> print my_list -> invokenative my_list append (args 9) ->  print my_list -!

<First frame executing> Frame str sp: -1 f_globals: {} f_locals: {} pc: 0 ret val None
0 Iload_const 2.0
stack->
[ 2.0 ]
2 Iload_const 4.0
stack->
[ 4.0 ]
[ 2.0 ]
4 Iload_const 5.0
stack->
[ 5.0 ]
[ 4.0 ]
[ 2.0 ]
6 Iload_const 3
stack->
[ 3 ]
[ 5.0 ]
[ 4.0 ]
[ 2.0 ]
8 Ibuild_list
stack->
[ 3 ]
[ 5.0 ]
[ 4.0 ]
[ <__main__.ObjectList object at 0x00F1A690> ]
9 Istore_name my_list
stack->
[ 3 ]
[ 5.0 ]
[ 4.0 ]
[ <__main__.ObjectList object at 0x00F1A690> ]
11 Iload_name my_list
stack->
[ 3 ]
[ 5.0 ]
[ 4.0 ]
[ <__main__.ObjectList object at 0x00F1A690> ]
13 Iprint
PRINT list
2.0 4.0 5.0
stack->
[ 3 ]
[ 5.0 ]
[ 4.0 ]
[ <__main__.ObjectList object at 0x00F1A690> ]
14 Iload_const 9.0
stack->
[ 3 ]
[ 5.0 ]
[ 9.0 ]
[ <__main__.ObjectList object at 0x00F1A690> ]
16 Iload_const 1
stack->
[ 3 ]
[ 1 ]
[ 9.0 ]
[ <__main__.ObjectList object at 0x00F1A690> ]
18 Iload_name my_list
stack->
[ <__main__.ObjectList object at 0x00F1A690> ]
[ 1 ]
[ 9.0 ]
[ <__main__.ObjectList object at 0x00F1A690> ]
20 Iinvokenative append
stack->
[ <__main__.ObjectList object at 0x00F1A690> ]
[ 1 ]
[ <compil.ObjectNone object at 0x00F1A770> ]
[ <__main__.ObjectList object at 0x00F1A690> ]
22 Iload_name my_list
stack->
[ <__main__.ObjectList object at 0x00F1A690> ]
[ <__main__.ObjectList object at 0x00F1A690> ]
[ <compil.ObjectNone object at 0x00F1A770> ]
[ <__main__.ObjectList object at 0x00F1A690> ]
24 Iprint
PRINT list
2.0 4.0 5.0 9.0
stack->
[ <__main__.ObjectList object at 0x00F1A690> ]
[ <__main__.ObjectList object at 0x00F1A690> ]
[ <compil.ObjectNone object at 0x00F1A770> ]
[ <__main__.ObjectList object at 0x00F1A690> ]
25 Istop
stack->
[ <__main__.ObjectList object at 0x00F1A690> ]
[ <__main__.ObjectList object at 0x00F1A690> ]
[ <compil.ObjectNone object at 0x00F1A770> ]
[ <__main__.ObjectList object at 0x00F1A690> ]
</frame executing>

// take item of array by index and print it
$>
set! my_l(build_list(args 3 4 5)) ->
print (arr_take_index my_l 2) -!

Out:
<First frame executing> Frame str sp: -1 f_globals: {} f_locals: {} pc: 0 ret val None
0 Iload_const 7.0
stack->
[ 7.0 ]
sp 0
2 Iload_const 4.0
stack->
[ 4.0 ]
[ 7.0 ]
sp 1
4 Iload_const 5.0
stack->
[ 5.0 ]
[ 4.0 ]
[ 7.0 ]
sp 2
6 Iload_const 3
stack->
[ 3 ]
[ 5.0 ]
[ 4.0 ]
[ 7.0 ]
sp 3
8 Ibuild_list
stack->
[ 3 ]
[ 5.0 ]
[ 4.0 ]
[ <__main__.ObjectList object at 0x00F29530> ]
sp 0
9 Istore_name my_l
stack->
[ 3 ]
[ 5.0 ]
[ 4.0 ]
[ <__main__.ObjectList object at 0x00F29530> ]
sp -1
11 Iload_const 2.0
stack->
[ 3 ]
[ 5.0 ]
[ 4.0 ]
[ 2.0 ]
sp 0
13 Iload_name my_l
stack->
[ 3 ]
[ 5.0 ]
[ <__main__.ObjectList object at 0x00F29530> ]
[ 2.0 ]
sp 1
15 Ioaload
stack->
[ 3 ]
[ 5.0 ]
[ <__main__.ObjectList object at 0x00F29530> ]
[ 5.0 ]
sp 0
16 Iprint
PRINT ob: 5.0
stack->
[ 3 ]
[ 5.0 ]
[ <__main__.ObjectList object at 0x00F29530> ]
[ 5.0 ]
sp 0
17 Istop
stack->
[ 3 ]
[ 5.0 ]
[ <__main__.ObjectList object at 0x00F29530> ]
[ 5.0 ]
sp 0
</frame executing>


// assign array by index
$>
set! my_l(build_list(args 3 4 5)) ->
arr_assign_index my_l 0 10 ->
print my_l -!
 
Out: 
<First frame executing> Frame str sp: -1 f_globals: {} f_locals: {} pc: 0 ret val None
0 Iload_const 3.0
stack->
[ 3.0 ]
sp 0
2 Iload_const 4.0
stack->
[ 4.0 ]
[ 3.0 ]
sp 1
4 Iload_const 5.0
stack->
[ 5.0 ]
[ 4.0 ]
[ 3.0 ]
sp 2
6 Iload_const 3
stack->
[ 3 ]
[ 5.0 ]
[ 4.0 ]
[ 3.0 ]
sp 3
8 Ibuild_list
stack->
[ 3 ]
[ 5.0 ]
[ 4.0 ]
[ <__main__.ObjectList object at 0x00F4A5B0> ]
sp 0
9 Istore_name my_l
stack->
[ 3 ]
[ 5.0 ]
[ 4.0 ]
[ <__main__.ObjectList object at 0x00F4A5B0> ]
sp -1
11 Iload_const 10.0
stack->
[ 3 ]
[ 5.0 ]
[ 4.0 ]
[ 10.0 ]
sp 0
13 Iload_const 0.0
stack->
[ 3 ]
[ 5.0 ]
[ 0.0 ]
[ 10.0 ]
sp 1
15 Iload_name my_l
stack->
[ 3 ]
[ <__main__.ObjectList object at 0x00F4A5B0> ]
[ 0.0 ]
[ 10.0 ]
sp 2
17 Ioastore
stack->
[ 3 ]
[ <__main__.ObjectList object at 0x00F4A5B0> ]
[ 0.0 ]
[ 10.0 ]
sp -1
18 Iload_name my_l
stack->
[ 3 ]
[ <__main__.ObjectList object at 0x00F4A5B0> ]
[ 0.0 ]
[ <__main__.ObjectList object at 0x00F4A5B0> ]
sp 0
20 Iprint
PRINT list
10.0 4.0 5.0
stack->
[ 3 ]
[ <__main__.ObjectList object at 0x00F4A5B0> ]
[ 0.0 ]
[ <__main__.ObjectList object at 0x00F4A5B0> ]
sp 0
21 Istop
stack->
[ 3 ]
[ <__main__.ObjectList object at 0x00F4A5B0> ]
[ 0.0 ]
[ <__main__.ObjectList object at 0x00F4A5B0> ]
sp 0
</frame executing>

//================================================================================================
// Func
//================================================================================================
// call function
//set! <func_name> (defun (params <par1> <par2> ... <par n>) (<body>:= ">" <exp1> -> <exp2> ->... <expn> [return <any>] -) )
$> set! my_func  (defun (params x) (> print |hi! -> return 1 -))  -> call my_func (args 1)  -!

Out:
<First frame executing> <__main__.FrameObject object at 0x00C37470>
0 Iload_const
<code_obj>
co_name: <func>
co_argcount: 0
co_consts: |hi! 1.0
co_names: []
co_varnames: []
co_code: [1, 0, 10, 1, 1, 16, 7]</code_obj>

stack-> [
<code_obj>
co_name: <func>
co_argcount: 0
co_consts: |hi! 1.0
co_names: []
co_varnames: []
co_code: [1, 0, 10, 1, 1, 16, 7]</code_obj>
 ]
2 Iload_const x
stack-> [
<code_obj>
co_name: <func>
co_argcount: 0
co_consts: |hi! 1.0
co_names: []
co_varnames: []
co_code: [1, 0, 10, 1, 1, 16, 7]</code_obj>
 ]
stack-> [ x ]
4 Iload_const 1
stack-> [
<code_obj>
co_name: <func>
co_argcount: 0
co_consts: |hi! 1.0
co_names: []
co_varnames: []
co_code: [1, 0, 10, 1, 1, 16, 7]</code_obj>
 ]
stack-> [ x ]
stack-> [ 1 ]
6 Imake_function
stack-> [ <__main__.FuncObject object at 0x00C37610> ]
7 Istore_name my_func
9 Iload_name my_func
stack-> [ <__main__.FuncObject object at 0x00C37610> ]
11 Iload_const 1.0
stack-> [ <__main__.FuncObject object at 0x00C37610> ]
stack-> [ 1.0 ]
13 Iload_const 1
stack-> [ <__main__.FuncObject object at 0x00C37610> ]
stack-> [ 1.0 ]
stack-> [ 1 ]
15 Icall_function
<New frame executing> <__main__.FrameObject object at 0x00C37650>
0 Iload_const |hi!
stack-> [ |hi! ]
2 Iprint
PRINT ob: |hi!
stack-> [ |hi! ]
3 Iload_const 1.0
stack-> [ |hi! ]
stack-> [ 1.0 ]
5 Ireturn_value
stack-> [ |hi! ]
6 Istop
stack-> [ |hi! ]
</frame executing>
stack-> [ 1.0 ]
</frame executing>
//===============================================================================================
// /Func
//===============================================================================================
// Test floats to equalent
$>
print (invokenative (eq 3 3) _str_) 
-!

Out:
<First frame executing> Frame str sp: -1 f_globals: {} f_locals: {} pc: 0 ret val None
0 Iload_const 0
stack->
[ 0 ]
2 Iload_const 3.0
stack->
[ 3.0 ]
[ 0 ]
4 Iload_const 3.0
stack->
[ 3.0 ]
[ 3.0 ]
[ 0 ]
6 Ieq
stack->
[ 3.0 ]
[ 1 ]
[ 0 ]
7 Iinvokenative _str_
stack->
[ 3.0 ]
[ 1 ]
[ True ]
9 Iprint
PRINT ob: True
stack->
[ 3.0 ]
[ 1 ]
[ True ]
10 Istop
stack->
[ 3.0 ]
[ 1 ]
[ True ]
</frame executing>
